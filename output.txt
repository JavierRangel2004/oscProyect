After clicking the button log in, i am not being redirected to the django admin site just a 404 not found, change it to redirect to de 8000/admin with the credentials and sesion sharing we need to only log in once in angular and not again in django
web-1       | [26/Nov/2024 23:55:52] "POST /api/auth/login/ HTTP/1.1" 200 483


File: ./docker-compose.yml
--------------------------------------------------------------------------------
services:
  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=osc_db
      - POSTGRES_USER=osc_user
      - POSTGRES_PASSWORD=osc_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - ./data_import:/app/data_import
      - ./data_export:/app/data_export
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      - DATABASE_NAME=osc_db
      - DATABASE_USER=osc_user
      - DATABASE_PASSWORD=osc_password
      - DATABASE_HOST=db
      - DATABASE_PORT=5432

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    volumes:
      - ./front:/usr/src/app
      - /usr/src/app/node_modules

    ports:
      - "4200:4200"
    depends_on:
      - web
    command: npm start

volumes:
  postgres_data:
--------------------------------------------------------------------------------

File: ./Dockerfile
--------------------------------------------------------------------------------
# Dockerfile

FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Install netcat for the health check in entrypoint.sh
RUN apt-get update && apt-get install -y netcat-openbsd

COPY . /app/

COPY entrypoint.sh /app/
RUN chmod +x /app/entrypoint.sh

EXPOSE 8000

ENTRYPOINT ["/app/entrypoint.sh"]

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
--------------------------------------------------------------------------------

File: ./entrypoint.sh
--------------------------------------------------------------------------------
#!/bin/bash

# Crear directorios de importación y exportación si no existen
mkdir -p data_import
mkdir -p data_export

# Esperar hasta que la base de datos esté disponible
echo "Esperando a que PostgreSQL esté disponible..."
while ! nc -z $DATABASE_HOST $DATABASE_PORT; do
  sleep 0.1
done
echo "PostgreSQL está disponible"

# Aplicar migraciones
echo "Aplicando migraciones..."
python manage.py makemigrations
python manage.py migrate

# Crear superusuario si no existe
echo "Creando superusuario..."
python manage.py createsu

# Ejecutar el comando de importación de datos si existe un archivo JSON en data_import
if ls data_import/*.json 1> /dev/null 2>&1; then
    echo "Importando datos desde archivos JSON en data_import..."
    for file in data_import/*.json; do
        echo "Importando datos desde $file..."
        python manage.py loaddata "$file"
    done
else
    echo "No se encontraron archivos JSON en data_import, omitiendo importación."
fi

# Exportar datos a data_export/data-<timestamp>.json
timestamp=$(date +"%Y%m%d%H%M%S")
export_file="data_export/data-${timestamp}.json"
echo "Exportando datos a ${export_file}..."
python manage.py export_data ${export_file}

# Iniciar el servidor de desarrollo
echo "Iniciando el servidor de desarrollo..."
exec "$@"

--------------------------------------------------------------------------------

File: ./manage.py
--------------------------------------------------------------------------------
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'osc_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
--------------------------------------------------------------------------------

File: ./requirements.txt
--------------------------------------------------------------------------------
Django>=3.2,<4.0
psycopg2-binary>=2.8
djangorestframework>=3.12
django-cors-headers>=3.5
pillow
sqlparse>=0.4
djangorestframework-simplejwt
--------------------------------------------------------------------------------

File: ./diagnostics\admin.py
--------------------------------------------------------------------------------
# diagnostics/admin.py

from django.contrib import admin
from .models import Diagnostic, Question, DiagnosticResult

@admin.register(Question)
class QuestionAdmin(admin.ModelAdmin):
    list_display = ('text',)
    search_fields = ('text',)

@admin.register(Diagnostic)
class DiagnosticAdmin(admin.ModelAdmin):
    list_display = ('name', 'description')
    search_fields = ('name', 'description')
    filter_horizontal = ('questions',)

@admin.register(DiagnosticResult)
class DiagnosticResultAdmin(admin.ModelAdmin):
    list_display = ('diagnostic', 'organization', 'score', 'date_taken')
    list_filter = ('diagnostic', 'organization', 'date_taken')
    search_fields = ('diagnostic__name', 'organization__name')
--------------------------------------------------------------------------------

File: ./diagnostics\apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class DiagnosticsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'diagnostics'
--------------------------------------------------------------------------------

File: ./diagnostics\models.py
--------------------------------------------------------------------------------
# diagnostics/models.py

from django.db import models
from organizations.models import Organization

class Question(models.Model):
    text = models.TextField()
    choices = models.JSONField()

    def __str__(self):
        return self.text

class Diagnostic(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    questions = models.ManyToManyField(Question, related_name='diagnostics')

    def __str__(self):
        return self.name

class DiagnosticResult(models.Model):
    diagnostic = models.ForeignKey(
        Diagnostic,
        on_delete=models.CASCADE,
        related_name='results'
    )
    organization = models.ForeignKey(
        Organization,
        on_delete=models.CASCADE,
        related_name='diagnostic_results'
    )
    date_taken = models.DateTimeField(auto_now_add=True)
    score = models.IntegerField()
    results = models.JSONField()

    def __str__(self):
        return f"Result for {self.organization.name} on {self.diagnostic.name}"
--------------------------------------------------------------------------------

File: ./diagnostics\tests.py
--------------------------------------------------------------------------------
from django.test import TestCase

# Create your tests here.
--------------------------------------------------------------------------------

File: ./diagnostics\views.py
--------------------------------------------------------------------------------
from django.shortcuts import render

# Create your views here.
--------------------------------------------------------------------------------

File: ./forum\admin.py
--------------------------------------------------------------------------------
# forum/admin.py

from django.contrib import admin
from .models import Forum, Post, Comment

@admin.register(Forum)
class ForumAdmin(admin.ModelAdmin):
    list_display = ('name', 'created_by', 'created_at')
    search_fields = ('name', 'description', 'created_by__username')

@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ('title', 'forum', 'created_by', 'created_at', 'is_active')
    list_filter = ('is_active', 'created_at', 'forum')
    search_fields = ('title', 'content', 'created_by__username', 'forum__name')

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('post', 'created_by', 'created_at', 'is_active')
    list_filter = ('is_active', 'created_at')
    search_fields = ('content', 'created_by__username', 'post__title')
--------------------------------------------------------------------------------

File: ./forum\apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class ForumConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'forum'
--------------------------------------------------------------------------------

File: ./forum\models.py
--------------------------------------------------------------------------------
# forum/models.py

from django.db import models
from users.models import User

class Forum(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    created_by = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='forums_created'
    )
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

class Post(models.Model):
    forum = models.ForeignKey(
        Forum,
        on_delete=models.CASCADE,
        related_name='posts'
    )
    title = models.CharField(max_length=255)
    content = models.TextField()
    created_by = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='posts_created'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.title

class Comment(models.Model):
    post = models.ForeignKey(
        Post,
        on_delete=models.CASCADE,
        related_name='comments'
    )
    content = models.TextField()
    created_by = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='comments_created'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"Comment by {self.created_by.username} on {self.post.title}"
--------------------------------------------------------------------------------

File: ./forum\tests.py
--------------------------------------------------------------------------------
from django.test import TestCase

# Create your tests here.
--------------------------------------------------------------------------------

File: ./forum\views.py
--------------------------------------------------------------------------------
from django.shortcuts import render

# Create your views here.
--------------------------------------------------------------------------------

File: ./front\angular.json
--------------------------------------------------------------------------------
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "app-front": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "standalone": false
        },
        "@schematics/angular:directive": {
          "standalone": false
        },
        "@schematics/angular:pipe": {
          "standalone": false
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/app-front",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kB",
                  "maximumError": "4kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "app-front:build:production"
            },
            "development": {
              "buildTarget": "app-front:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  }
}
--------------------------------------------------------------------------------

File: ./front\Dockerfile
--------------------------------------------------------------------------------
# front/Dockerfile

# Usa una imagen base de Node.js
FROM node:18-alpine

# Establece el directorio de trabajo
WORKDIR /usr/src/app

# Copia los archivos de dependencias
COPY package.json package-lock.json ./

# Instala Angular CLI globalmente y luego las dependencias del proyecto
RUN npm install -g @angular/cli@latest && npm install

# Copia el resto del código de la aplicación
COPY . .

# Exponer el puerto que usará Angular
EXPOSE 4200

# Comando para iniciar el servidor de desarrollo de Angular
CMD ["ng", "serve", "--host", "0.0.0.0", "--poll", "2000"]
--------------------------------------------------------------------------------

File: ./front\package.json
--------------------------------------------------------------------------------
{
  "name": "app-front",
  "version": "0.0.0",
  "scripts": {
    "start": "ng serve --host 0.0.0.0 --poll 2000",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^18.2.0",
    "@angular/common": "^18.2.0",
    "@angular/compiler": "^18.2.0",
    "@angular/core": "^18.2.0",
    "@angular/forms": "^18.2.0",
    "@angular/platform-browser": "^18.2.0",
    "@angular/platform-browser-dynamic": "^18.2.0",
    "@angular/router": "^18.2.0",
    "animate.css": "^4.1.1",
    "rxjs": "^7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "^0.14.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^18.2.7",
    "@angular/cli": "^18.2.7",
    "@angular/compiler-cli": "^18.2.0",
    "@types/jasmine": "~5.1.0",
    "jasmine-core": "~5.2.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.4.0"
  }
}
--------------------------------------------------------------------------------

File: ./front\tsconfig.app.json
--------------------------------------------------------------------------------
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}
--------------------------------------------------------------------------------

File: ./front\tsconfig.json
--------------------------------------------------------------------------------
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "sourceMap": true,
    "declaration": false,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}
--------------------------------------------------------------------------------

File: ./front\tsconfig.spec.json
--------------------------------------------------------------------------------
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
--------------------------------------------------------------------------------

File: ./front\public\Designer.png
--------------------------------------------------------------------------------
Error reading ./front\public\Designer.png: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte
File: ./front\public\favicon.ico
--------------------------------------------------------------------------------
Error reading ./front\public\favicon.ico: 'utf-8' codec can't decode byte 0xa8 in position 14: invalid start byte
File: ./front\public\hero.jpg
--------------------------------------------------------------------------------
Error reading ./front\public\hero.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte
File: ./front\public\orgEX.jpg
--------------------------------------------------------------------------------
Error reading ./front\public\orgEX.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte
File: ./front\public\Poppins-Regular.ttf
--------------------------------------------------------------------------------
Error reading ./front\public\Poppins-Regular.ttf: 'utf-8' codec can't decode byte 0x80 in position 7: invalid start byte
File: ./front\src\index.html
--------------------------------------------------------------------------------
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>ComunicacionOSC</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="Designer.png">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>

</head>
<body>
  <app-root></app-root>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

</body>
</html>
--------------------------------------------------------------------------------

File: ./front\src\main.ts
--------------------------------------------------------------------------------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule, {
  ngZoneEventCoalescing: true
})
  .catch(err => console.error(err));
--------------------------------------------------------------------------------

File: ./front\src\styles.css
--------------------------------------------------------------------------------
/* You can add global styles to this file, and also import other style files */

@import url('https://fonts.googleapis.com/css2?family=New+Amsterdam&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');


.poppins-thin {
    font-family: "Poppins", serif;
    font-weight: 100;
    font-style: normal;
  }
  
  .poppins-extralight {
    font-family: "Poppins", serif;
    font-weight: 200;
    font-style: normal;
  }
  
  .poppins-light {
    font-family: "Poppins", serif;
    font-weight: 300;
    font-style: normal;
  }
  
  .poppins-regular {
    font-family: "Poppins", serif;
    font-weight: 400;
    font-style: normal;
  }
  
  .poppins-medium {
    font-family: "Poppins", serif;
    font-weight: 500;
    font-style: normal;
  }
  
  .poppins-semibold {
    font-family: "Poppins", serif;
    font-weight: 600;
    font-style: normal;
  }
  
  .poppins-bold {
    font-family: "Poppins", serif;
    font-weight: 700;
    font-style: normal;
  }
  
  .poppins-extrabold {
    font-family: "Poppins", serif;
    font-weight: 800;
    font-style: normal;
  }
  
  .poppins-black {
    font-family: "Poppins", serif;
    font-weight: 900;
    font-style: normal;
  }
  
  .poppins-thin-italic {
    font-family: "Poppins", serif;
    font-weight: 100;
    font-style: italic;
  }
  
  .poppins-extralight-italic {
    font-family: "Poppins", serif;
    font-weight: 200;
    font-style: italic;
  }
  
  .poppins-light-italic {
    font-family: "Poppins", serif;
    font-weight: 300;
    font-style: italic;
  }
  
  .poppins-regular-italic {
    font-family: "Poppins", serif;
    font-weight: 400;
    font-style: italic;
  }
  
  .poppins-medium-italic {
    font-family: "Poppins", serif;
    font-weight: 500;
    font-style: italic;
  }
  
  .poppins-semibold-italic {
    font-family: "Poppins", serif;
    font-weight: 600;
    font-style: italic;
  }
  
  .poppins-bold-italic {
    font-family: "Poppins", serif;
    font-weight: 700;
    font-style: italic;
  }
  
  .poppins-extrabold-italic {
    font-family: "Poppins", serif;
    font-weight: 800;
    font-style: italic;
  }
  
  .poppins-black-italic {
    font-family: "Poppins", serif;
    font-weight: 900;
    font-style: italic;
  }

  * {
    font-family: 'Poppins';
  }

  p {
    font-size: 1.2rem;
    line-height: 2.4rem;
  }
  --------------------------------------------------------------------------------

File: ./front\src\app\app-routing.module.ts
--------------------------------------------------------------------------------
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './com/home/home.component';
import { NotFoundComponent } from './com/not-found/not-found.component';
import { OrganizationsComponent } from './com/organizations/organizations.component';
import { ProjectsComponent } from './com/projects/projects.component';
import { OrganizationDetailsComponent } from './com/organization-details/organization-details.component';
import { ProjectDetailsComponent } from './com/project-details/project-details.component';
import { SigninComponent } from './com/signin/signin.component';

// src/app/app-routing.module.ts
const routes: Routes = [
  { path: 'home', component: HomeComponent },
  { path: 'organizations', component: OrganizationsComponent },
  { path: 'organizations/:id', component: OrganizationDetailsComponent },
  { path: 'projects', component: ProjectsComponent },
  { path: 'projects/:id', component: ProjectDetailsComponent },
  { path: 'login', component: SigninComponent },
  { path: 'not-found', component: NotFoundComponent },
  { path: '', redirectTo: 'home', pathMatch: 'full' },
  { path: '**', redirectTo: 'not-found' },
];


@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
--------------------------------------------------------------------------------

File: ./front\src\app\app.component.css
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

File: ./front\src\app\app.component.html
--------------------------------------------------------------------------------
<app-navbar></app-navbar>

<div class="my-3">
  <router-outlet></router-outlet>
</div>--------------------------------------------------------------------------------

File: ./front\src\app\app.component.spec.ts
--------------------------------------------------------------------------------
import { TestBed } from '@angular/core/testing';
import { RouterModule } from '@angular/router';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterModule.forRoot([])
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'app-front'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('app-front');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, app-front');
  });
});
--------------------------------------------------------------------------------

File: ./front\src\app\app.component.ts
--------------------------------------------------------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'app-front';
}
--------------------------------------------------------------------------------

File: ./front\src\app\app.module.ts
--------------------------------------------------------------------------------
// src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HomeComponent } from './com/home/home.component';
import { NotFoundComponent } from './com/not-found/not-found.component';
import { NavbarComponent } from './com/navbar/navbar.component';
import { OrganizationsComponent } from './com/organizations/organizations.component';
import { ProjectsComponent } from './com/projects/projects.component';
import { OrganizationDetailsComponent } from './com/organization-details/organization-details.component';
import { ProjectDetailsComponent } from './com/project-details/project-details.component';
import { SigninComponent } from './com/signin/signin.component';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    NotFoundComponent,
    NavbarComponent,
    OrganizationsComponent,
    ProjectsComponent,
    OrganizationDetailsComponent,
    ProjectDetailsComponent,
    SigninComponent,
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule,
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
--------------------------------------------------------------------------------

File: ./front\src\app\com\home\home.component.css
--------------------------------------------------------------------------------
.hero-section {
    width: 100%;
    padding: 0 7%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0;
    max-width: none;
    background-image: url('../../../../public/hero.jpg');
    background-size: cover;
    background-repeat: no-repeat;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.5);
    background-blend-mode: overlay;
  }

  .services .card{
    background: #2b4352;
  }
  .services .card-body i {
    font-size: 50px;
  }

  button{
    display: block;
    margin: 2% auto 0;
    border: none;
    background: #2b4352;
    padding: 10px 175px;
    color: #fff;
    text-transform: uppercase;
    font-size: 18px;
    border-radius: 5px;
  }--------------------------------------------------------------------------------

File: ./front\src\app\com\home\home.component.html
--------------------------------------------------------------------------------
<!-- Hero Section -->
<section class="hero-section text-center py-5 text-white">
  <div>
    <h1 class="m-5">Bienvenido a Redes que Cambian</h1>
      <div>
        <p>Conoce y apoya a diversas organizaciones sociales en México</p>
        <a class="btn btn-lg btn-outline-light me-2" href="organizations">Explorar Organizaciones</a>
        <a class="btn btn-lg btn-outline-light" href="projects">Explorar Proyectos</a>
      </div>
  </div>  
</section>

<!-- Causas Section -->
<section class="services section-padding py-5 bg-body-secondary" id="services">
  <div class="container">
    <div class="row">
      <div class="col-md-12">
        <div class="section-header text-center pb-5">
          <h2>Causas que se están apoyando</h2>
          <p>Por el momento, recopilamos información de organizaciones que están ayudando a mejorar a México en las siguientes categorías: </p>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-12 col-md-12 col-lg-4">
        <div class="card text-white text-center pb-2">
          <div class="card-body">
            <i class="fa-solid fa-book my-2"></i>
            <h3 class="card-title my-3">Best Quality</h3>
            <p class="lead">Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci eligendi modi temporibus alias iste. Accusantium?</p>
            
          </div>
        </div>
      </div>
      <div class="col-12 col-md-12 col-lg-4">
        <div class="card text-white text-center pb-2">
          <div class="card-body">
            <i class="fa-solid fa-handshake-angle my-2"></i>
            <h3 class="card-title my-3">Sustainability</h3>
            <p class="lead">Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci eligendi modi temporibus alias iste. Accusantium?</p>
            
          </div>
        </div>
      </div>
      <div class="col-12 col-md-12 col-lg-4">
        <div class="card text-white text-center pb-2">
          <div class="card-body">
            <i class="fa-solid fa-house my-2"></i>
            <h3 class="card-title my-3">Integrity</h3>
            <p class="lead">Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci eligendi modi temporibus alias iste. Accusantium?</p>
            
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Forma parte de Redes que Cambian Section -->
<section class="join-us section-padding py-5" id="join-us">
  <div class="container">
    <div class="row">
      <div class="col-md-12">
        <div class="section-header text-center pb-5">
          <h2>Forma parte de Redes que Cambian</h2>
          <p>Registra tu organización para que más personas puedan conocerla y apoyarla.</p>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-12">
        <form>
          <div class="mb-3">
            <label for="orgName" class="form-label">Nombre de la Organización</label>
            <input type="text" class="form-control" id="orgName" required>
          </div>
          <div class="mb-3">
            <label for="orgDescription" class="form-label">Descripción</label>
            <textarea class="form-control" id="orgDescription" rows="3" required></textarea>
          </div>
          <div class="mb-3">
            <label for="orgWebsite" class="form-label">Website</label>
            <input type="url" class="form-control" id="orgWebsite">
          </div>
          <div class="mb-3">
            <label for="orgLogo" class="form-label">Logo</label>
            <input type="file" class="form-control" id="orgLogo" accept="image/*">
          </div>
          <div class="mb-3">
            <label for="orgAddress" class="form-label">Dirección</label>
            <input type="text" class="form-control" id="orgAddress" required>
          </div>
          <div class="mb-3">
            <label for="orgCategory" class="form-label">Categoría</label>
            <select class="form-select" id="orgCategory" required>
              <option value="salud">Salud</option>
              <option value="infancia">Infancia</option>
              <option value="apoyo-social">Apoyo Social</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="orgSocials" class="form-label">Redes Sociales</label>
            <input type="text" class="form-control" id="orgSocials" placeholder="Ingrese su cuenta de Facebook, Twitter, Instagram, etc.">
          </div>
          <div class="mb-3">
            <label for="orgPhone" class="form-label">Número de Teléfono</label>
            <input type="tel" class="form-control" id="orgPhone" required>
          </div>
          <button type="submit" class="btn btn-dark">Enviar solicitud</button>
        </form>
      </div>
    </div>
  </div>
</section>--------------------------------------------------------------------------------

File: ./front\src\app\com\home\home.component.ts
--------------------------------------------------------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrl: './home.component.css'
})
export class HomeComponent {

}
--------------------------------------------------------------------------------

File: ./front\src\app\com\navbar\navbar.component.css
--------------------------------------------------------------------------------
.navbar-brand img{ height: 50px;}--------------------------------------------------------------------------------

File: ./front\src\app\com\navbar\navbar.component.html
--------------------------------------------------------------------------------
<nav class="navbar navbar-expand-lg bg-light-subtle">
  <div class="container-fluid">
      <a class="navbar-brand" href="#"><img src="Designer.png"></a>
      <a class="navbar-brand" href="#">Redes que Cambian</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse d-flex justify-content-end" id="navbarNavAltMarkup">
      <div class="navbar-nav">
        <a class="nav-link active" aria-current="page" href="home">Inicio</a>
        <a class="nav-link" href="organizations">Organizaciones</a>
        <a class="nav-link" href="projects">Proyectos</a> 
      </div>
      <a href="login" class="btn btn-outline-success">Iniciar Sesión</a>
    </div>
  </div>
</nav>
--------------------------------------------------------------------------------

File: ./front\src\app\com\navbar\navbar.component.ts
--------------------------------------------------------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrl: './navbar.component.css'
})
export class NavbarComponent {

}
--------------------------------------------------------------------------------

File: ./front\src\app\com\not-found\not-found.component.css
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

File: ./front\src\app\com\not-found\not-found.component.html
--------------------------------------------------------------------------------
<div class="container">
    <div class="row">
        <div class="col alert alert-danger">
            <h1>404 not found</h1>
        </div>
    </div>
</div>--------------------------------------------------------------------------------

File: ./front\src\app\com\not-found\not-found.component.ts
--------------------------------------------------------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-not-found',
  templateUrl: './not-found.component.html',
  styleUrl: './not-found.component.css'
})
export class NotFoundComponent {

}
--------------------------------------------------------------------------------

File: ./front\src\app\com\organization-details\organization-details.component.css
--------------------------------------------------------------------------------
* {
	transition: all .5s ease-out;
}
body {
	background: linear-gradient(to right, #d19f48 50%, #fff 50%);
}
.card {
	width: 22rem;
	background-color: #2b4352;
	color: #fff;
	border-radius: 20px;
	box-shadow: 0 1px 1px rgba(72, 78, 85, .6);
}
.card img {
	border-radius: 20px 20px 0 0;
}
.card:hover {
	background-color: #fff;
	color: #000;
	box-shadow: 0 20px 40px rgba(72, 78, 85, .6);
	transform: translateY(-15px);
}
--------------------------------------------------------------------------------

File: ./front\src\app\com\organization-details\organization-details.component.html
--------------------------------------------------------------------------------
<!-- src/app/com/organization-details/organization-details.component.html -->
<div *ngIf="organization">
  <div class="container">
    <div class="row">
      <div class="col-md-12 my-5">
        <h1 class="text-center">{{ organization.name }}</h1>
      </div>
    </div>
    <div class="row">
      <div class="col-md-6">
        <img
          [src]="organization.logo || 'orgEX.jpg'"
          class="img-fluid"
          alt="{{ organization.name }}"
        />
      </div>
      <div class="col-md-6">
        <p>{{ organization.description || 'Sin descripción' }}</p>
        <p>Ubicación: {{ organization.address }}</p>
        <p *ngIf="organization.email">Correo: {{ organization.email }}</p>
        <p *ngIf="organization.phone_number">Teléfono: {{ organization.phone_number }}</p>
        <p *ngIf="organization.website">
          Sitio web:
          <a [href]="organization.website" target="_blank">{{ organization.website }}</a>
        </p>
        <p *ngIf="organization.social_media_1 != 'None'">
          Redes sociales:
          <a
            *ngIf="organization.social_media_1"
            [href]="organization.social_media_1"
            target="_blank"
            >Link</a
          >
          <a
            *ngIf="organization.social_media_2 != 'None'"
            [href]="organization.social_media_2"
            target="_blank"
            > -- Link 2</a
          >
          </p>
        </div>
      </div>
      <div class="row" *ngIf="projects.length > 0">
        <div class="col-md-12 mt-5">
          <h2 class="text-center">Proyectos</h2>
        </div>
        <div class="row">
          <div
            class="col-md-4 mb-4"
            *ngFor="let project of projects"
          >
            <div class="card mx-auto my-5">
              <img
                [src]="project.images.length > 0 ? project.images[0].image : 'orgEX.jpg'"
                class="card-img-top"
                alt="{{ project.name }}"
              />
              <div class="card-body">
                <h5 class="card-title">{{ project.name }}</h5>
                <hr />
                <p class="card-text">
                  {{ project.description || 'Sin descripción' }}
                </p>
                <a
                  [routerLink]="['/projects', project.id]"
                  class="btn btn-dark"
                  >Ver Proyecto</a
                >
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</div>
  --------------------------------------------------------------------------------

File: ./front\src\app\com\organization-details\organization-details.component.ts
--------------------------------------------------------------------------------
// src/app/com/organization-details/organization-details.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { OrganizationService } from '../../services/organization.service';
import { ProjectService } from '../../services/project.service';
import { Organization } from '../../models/organization';
import { Project } from '../../models/project';

@Component({
  selector: 'app-organization-details',
  templateUrl: './organization-details.component.html',
  styleUrl: './organization-details.component.css'
})
export class OrganizationDetailsComponent implements OnInit {
  organization: Organization | null = null;
  projects: Project[] = [];

  constructor(
    private route: ActivatedRoute,
    private organizationService: OrganizationService,
    private projectService: ProjectService
  ) {}

  // src/app/com/organization-details/organization-details.component.ts
  ngOnInit(): void {
    const id = Number(this.route.snapshot.paramMap.get('id'));
    this.organizationService.getOrganization(id).subscribe(
      (data) => {
        this.organization = data;
        // Fetch projects for this organization
        this.projectService.getProjectsByOrganization(id).subscribe(
          (projects) => (this.projects = projects),
          (error) => console.error('Error fetching projects for organization', error)
        );
      },
      (error) => console.error('Error fetching organization', error)
    );
  }

}
--------------------------------------------------------------------------------

File: ./front\src\app\com\organizations\organizations.component.css
--------------------------------------------------------------------------------
.box {
	border-radius: 10px;
	position: relative;
	overflow: hidden;
	box-shadow: 5px 5px 15px rgba(0,0,0,0.9);
	background-color: #2b4352;
	color: #fff;
	height: 20rem;
}

.box h3 {
	font-size: 1.5rem;
	margin: 0;
	padding: 10px;
	overflow-wrap: break-word;
	word-wrap: break-word;
	hyphens: auto;
}

.box img {
	width: 100%;
	/* border-radius: 10px; */
	display: block;
	transition: transform 0.5s;
	height: 65%;
	object-fit: cover;
}

.overlay {
	width: 100%;
	height: 0;
	background: linear-gradient(transparent,#2b4352 30%);
	border-radius: 10px;
	position: absolute;
	left: 0;
	bottom: 0;
	overflow: hidden;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	padding: 0 30px;
	transition: height 0.5s;
}

.overlay p {
	text-align: justify;
	font-size: 15px;
	line-height: 1.5;
	transition: height 0.5s;
}

.box:hover img {
	transform: scale(1.1);
}

.box:hover .overlay {
	height: 100%;
}
--------------------------------------------------------------------------------

File: ./front\src\app\com\organizations\organizations.component.html
--------------------------------------------------------------------------------
<!-- src/app/com/organizations/organizations.component.html -->
<section class="container my-5">
  <h2 class="text-center mb-4">Organizaciones</h2>
  <div class="row">
    <div class="col-md-4 mb-4" *ngFor="let organization of organizations">
      <div class="box text-center">
        <img
          alt="{{ organization.name }}"
          [src]="organization.logo || 'orgEX.jpg'"
        />
        <h3 class="m-3">{{ organization.name }}</h3>
        <div class="overlay">
          <h3>{{ organization.name }}</h3>
          <p>{{ organization.description || 'Sin descripción' }}</p>
          <a
            class="btn btn-light"
            [routerLink]="['/organizations', organization.id]"
            >Más información</a
          >
        </div>
      </div>
    </div>
  </div>
</section>
--------------------------------------------------------------------------------

File: ./front\src\app\com\organizations\organizations.component.ts
--------------------------------------------------------------------------------
// src/app/com/organizations/organizations.component.ts
import { Component, OnInit } from '@angular/core';
import { OrganizationService } from '../../services/organization.service';
import { Organization } from '../../models/organization';

@Component({
  selector: 'app-organizations',
  templateUrl: './organizations.component.html',
  styleUrl: './organizations.component.css'
})
export class OrganizationsComponent implements OnInit {
  organizations: Organization[] = [];

  constructor(private organizationService: OrganizationService) {}

  ngOnInit(): void {
    this.organizationService.getOrganizations().subscribe(
      (data) => {
        this.organizations = data.sort((a, b) =>
          a.name.localeCompare(b.name)
        );
      },
      (error) => console.error('Error fetching organizations', error)
    );
  }
}
--------------------------------------------------------------------------------

File: ./front\src\app\com\project-details\project-details.component.css
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

File: ./front\src\app\com\project-details\project-details.component.html
--------------------------------------------------------------------------------
<!-- src/app/com/project-details/project-details.component.html -->
<div *ngIf="project">
    <div class="container">
      <div class="row">
        <div class="col-md-12 my-5">
          <h1 class="text-center">{{ project.name }}</h1>
        </div>
      </div>
      <div class="row">
        <div class="col-md-6">
          <img
            [src]="project.images.length > 0 ? project.images[0].image : 'orgEX.jpg'"
            class="img-fluid"
            alt="{{ project.name }}"
          />
        </div>
        <div class="col-md-6">
          <h3>{{ project.organization.name }}</h3>
          <p><strong>Objetivos:</strong> {{ project.objectives || 'N/A' }}</p>
          <p><strong>Descripción:</strong> {{ project.description || 'N/A' }}</p>
          <p>
            <strong>Cómo participar:</strong>
            {{ project.participation_methods || 'N/A' }}
          </p>
        </div>
      </div>
    </div>
  </div>
  --------------------------------------------------------------------------------

File: ./front\src\app\com\project-details\project-details.component.spec.ts
--------------------------------------------------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProjectDetailsComponent } from './project-details.component';

describe('ProjectDetailsComponent', () => {
  let component: ProjectDetailsComponent;
  let fixture: ComponentFixture<ProjectDetailsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ProjectDetailsComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProjectDetailsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
--------------------------------------------------------------------------------

File: ./front\src\app\com\project-details\project-details.component.ts
--------------------------------------------------------------------------------
// src/app/com/project-details/project-details.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ProjectService } from '../../services/project.service';
import { Project } from '../../models/project';

@Component({
  selector: 'app-project-details',
  templateUrl: './project-details.component.html',
  styleUrl: './project-details.component.css'
})
export class ProjectDetailsComponent implements OnInit {
  project: Project | null = null;

  constructor(
    private route: ActivatedRoute,
    private projectService: ProjectService
  ) {}

  ngOnInit(): void {
    const id = Number(this.route.snapshot.paramMap.get('id'));
    this.projectService.getProject(id).subscribe(
      (data) => (this.project = data),
      (error) => console.error('Error fetching project', error)
    );
  }
}
--------------------------------------------------------------------------------

File: ./front\src\app\com\projects\projects.component.css
--------------------------------------------------------------------------------
.box {
	border-radius: 10px;
	position: relative;
	overflow: hidden;
	box-shadow: 5px 5px 15px rgba(0,0,0,0.9);
	background-color: #2b4352;
	color: #fff;
	height: 20rem;
}

.box h3 {
	font-size: 1.5rem;
	margin: 0;
	padding: 10px;
	overflow-wrap: break-word;
	word-wrap: break-word;
	hyphens: auto;
}

.box img {
	width: 100%;
	/* border-radius: 10px; */
	display: block;
	transition: transform 0.5s;
	height: 65%;
	object-fit: cover;
}

.overlay {
	width: 100%;
	height: 0;
	background: linear-gradient(transparent,#2b4352 30%);
	border-radius: 10px;
	position: absolute;
	left: 0;
	bottom: 0;
	overflow: hidden;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	padding: 0 30px;
	transition: height 0.5s;
}

.overlay p {
	text-align: justify;
	font-size: 15px;
	line-height: 1.5;
	transition: height 0.5s;
}

.box:hover img {
	transform: scale(1.1);
}

.box:hover .overlay {
	height: 100%;
}
--------------------------------------------------------------------------------

File: ./front\src\app\com\projects\projects.component.html
--------------------------------------------------------------------------------
<!-- src/app/com/projects/projects.component.html -->
<section class="container my-5">
  <h2 class="text-center mb-4">Proyectos</h2>
  <div class="row">
    <div class="col-md-4 mb-4" *ngFor="let project of projects">
      <div class="box text-center">
        <img
          alt="{{ project.name }}"
          [src]="project.images.length > 0 ? project.images[0].image : 'orgEX.jpg'"
        />
        <h3 class="m-3">{{ project.name }}</h3>
        <div class="overlay">
          <h3>{{ project.name }}</h3>
          <h5>{{ project.organization.name }}</h5>
          <p>{{ project.description || 'Sin descripción' }}</p>
          <a
            class="btn btn-light"
            [routerLink]="['/projects', project.id]"
            >Más información</a
          >
        </div>
      </div>
    </div>
  </div>
</section>
--------------------------------------------------------------------------------

File: ./front\src\app\com\projects\projects.component.ts
--------------------------------------------------------------------------------
// src/app/com/projects/projects.component.ts
import { Component, OnInit } from '@angular/core';
import { ProjectService } from '../../services/project.service';
import { Project } from '../../models/project';

@Component({
  selector: 'app-projects',
  templateUrl: './projects.component.html',
  styleUrl: './projects.component.css'
})
export class ProjectsComponent implements OnInit {
  projects: Project[] = [];

  constructor(private projectService: ProjectService) {}

  // src/app/com/projects/projects.component.ts
  ngOnInit(): void {
    this.projectService.getProjects().subscribe(
      (data) => {
        this.projects = data.sort((a, b) => a.name.localeCompare(b.name));
      },
      (error) => console.error('Error fetching projects', error)
    );
  }
}
--------------------------------------------------------------------------------

File: ./front\src\app\com\signin\signin.component.css
--------------------------------------------------------------------------------
#wrapper {
	width: 500px;
	height: 300px;
	position: relative;
	overflow: hidden;
	box-shadow: 12px 12px 20px rgba(0, 0, 0, 0.4);
}
#wrapper h1 {
	color: #2b4352;
}
.form {
	width: 500px;
	height: 370px;
	position: absolute;
	top: 0;
	left: 0;
	text-align: center;
	padding: 10px;
}
.form input {
	width: 80%;
	height: 35px;
	margin-bottom: 15px;
	padding: 0 0 0 15px;
}

button{
	display: block;
	margin: 2% auto 0;
	border: none;
	background: #2b4352;
	padding: 10px 175px;
	color: #fff;
	text-transform: uppercase;
	font-size: 18px;
	border-radius: 5px;
}--------------------------------------------------------------------------------

File: ./front\src\app\com\signin\signin.component.html
--------------------------------------------------------------------------------
<div class="d-flex mt-5 py-5">
  <div id="wrapper" class="m-auto">
    <form id="login-side" class="form mt-4" (ngSubmit)="onSubmit()">
      <h1>Iniciar sesión</h1>
      <input
        type="text"
        placeholder="Usuario"
        [(ngModel)]="username"
        name="username"
        required
      />
      <input
        type="password"
        placeholder="Contraseña"
        [(ngModel)]="password"
        name="password"
        required
      />
      <button class="btn btn-dark" type="submit">Log in</button>
      <div *ngIf="errorMessage" class="alert alert-danger mt-3">
        {{ errorMessage }}
      </div>
    </form>
  </div>
</div>
--------------------------------------------------------------------------------

File: ./front\src\app\com\signin\signin.component.ts
--------------------------------------------------------------------------------
// src/app/com/signin/signin.component.ts

import { Component } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';
import { HttpErrorResponse } from '@angular/common/http';

@Component({
  selector: 'app-signin',
  templateUrl: './signin.component.html',
  styleUrls: ['./signin.component.css']
})
export class SigninComponent {
  username = '';
  password = '';
  errorMessage = '';

  constructor(private authService: AuthService, private router: Router) {}

  onSubmit() {
    this.authService.login(this.username, this.password).subscribe({
      next: (response) => {
        if (response.access && response.refresh) {
          localStorage.setItem('access_token', response.access);
          localStorage.setItem('refresh_token', response.refresh);
          this.router.navigate(['/admin/']);
        }
      },
      error: (error: HttpErrorResponse) => {
        console.error('Error during login:', error);
        this.errorMessage = error.error?.message || 'An error occurred during login.';
      },
    });
  }
  
}
--------------------------------------------------------------------------------

File: ./front\src\app\models\category.ts
--------------------------------------------------------------------------------
// src/app/models/category.ts
export interface Category {
    id: number;
    name: string;
  }
  --------------------------------------------------------------------------------

File: ./front\src\app\models\image.ts
--------------------------------------------------------------------------------
// src/app/models/image.ts
export interface Image {
    id: number;
    image: string; // URL or path to the image
  }
  --------------------------------------------------------------------------------

File: ./front\src\app\models\organization.ts
--------------------------------------------------------------------------------
// src/app/models/organization.ts
import { Category } from './category';

export interface Organization {
  id: number;
  name: string;
  description: string | null;
  website: string | null;
  logo: string | null;
  address: string;
  categories: Category[];
  date_added: string;
  is_active: boolean;
  social_media_1: string | null;
  social_media_2: string | null;
  phone_number: string | null;
  email: string | null;
}
--------------------------------------------------------------------------------

File: ./front\src\app\models\project.ts
--------------------------------------------------------------------------------
// src/app/models/project.ts
import { Organization } from './organization';
import { Category } from './category';
import { Image } from './image';

export interface Project {
  id: number;
  organization: Organization;
  name: string;
  description: string;
  objectives: string;
  achievements: string;
  participation_methods: string;
  images: Image[];
  categories: Category[];
  date_added: string;
  is_active: boolean;
}
--------------------------------------------------------------------------------

File: ./front\src\app\services\auth.service.ts
--------------------------------------------------------------------------------
// src/app/services/auth.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

interface LoginResponse {
    access?: string;
    refresh?: string;
    error?: string; // Optional property to capture error messages
  }
  

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private loginUrl = 'http://localhost:8000/api/auth/login/';

  constructor(private http: HttpClient) {}

  login(
    username: string,
    password: string
  ): Observable<LoginResponse> {
    const body = { username, password };
    return this.http.post<LoginResponse>(this.loginUrl, body);
  }

  // Otros métodos para refrescar tokens, logout, etc.
}
--------------------------------------------------------------------------------

File: ./front\src\app\services\organization.service.ts
--------------------------------------------------------------------------------
// src/app/services/organization.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

import { Organization } from '../models/organization';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root',
})
export class OrganizationService {
  private apiUrl = `${environment.apiUrl}/organizations/organizations/`;

  constructor(private http: HttpClient) {}

  getOrganizations(): Observable<Organization[]> {
    return this.http.get<Organization[]>(this.apiUrl);
  }

  getOrganization(id: number): Observable<Organization> {
    return this.http.get<Organization>(`${this.apiUrl}${id}/`);
  }
}
--------------------------------------------------------------------------------

File: ./front\src\app\services\project.service.ts
--------------------------------------------------------------------------------
// src/app/services/project.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

import { Project } from '../models/project';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root',
})
export class ProjectService {
  private apiUrl = `${environment.apiUrl}/projects/projects/`;

  constructor(private http: HttpClient) {}

  getProjects(): Observable<Project[]> {
    return this.http.get<Project[]>(this.apiUrl);
  }

  getProject(id: number): Observable<Project> {
    return this.http.get<Project>(`${this.apiUrl}${id}/`);
  }

  // src/app/services/project.service.ts
  getProjectsByOrganization(organizationId: number): Observable<Project[]> {
    return this.http.get<Project[]>(`${this.apiUrl}?organization=${organizationId}`);
  }

}
--------------------------------------------------------------------------------

File: ./front\src\environments\environment.ts
--------------------------------------------------------------------------------
export const environment = {
  production: false,
  apiUrl: 'http://localhost:8000',
  mediaUrl: 'http://localhost:8000'  // Add this line
};
--------------------------------------------------------------------------------

File: ./media\logos\header.jpg
--------------------------------------------------------------------------------
Error reading ./media\logos\header.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte
File: ./media\logos\imagen_2024-11-26_130156887.png
--------------------------------------------------------------------------------
Error reading ./media\logos\imagen_2024-11-26_130156887.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
File: ./media\logos\imagen_2024-11-26_130325318.png
--------------------------------------------------------------------------------
Error reading ./media\logos\imagen_2024-11-26_130325318.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
File: ./media\logos\imagen_2024-11-26_130403384.png
--------------------------------------------------------------------------------
Error reading ./media\logos\imagen_2024-11-26_130403384.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
File: ./media\logos\imagen_2024-11-26_130529134.png
--------------------------------------------------------------------------------
Error reading ./media\logos\imagen_2024-11-26_130529134.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
File: ./media\logos\imagen_2024-11-26_130559174.png
--------------------------------------------------------------------------------
Error reading ./media\logos\imagen_2024-11-26_130559174.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
File: ./media\logos\imagen_2024-11-26_130715471.png
--------------------------------------------------------------------------------
Error reading ./media\logos\imagen_2024-11-26_130715471.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
File: ./media\logos\imagen_2024-11-26_130745764.png
--------------------------------------------------------------------------------
Error reading ./media\logos\imagen_2024-11-26_130745764.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
File: ./media\logos\imagen_2024-11-26_130845905.png
--------------------------------------------------------------------------------
Error reading ./media\logos\imagen_2024-11-26_130845905.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
File: ./media\logos\logo-asiloprimavera.jpg
--------------------------------------------------------------------------------
Error reading ./media\logos\logo-asiloprimavera.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte
File: ./organizations\admin.py
--------------------------------------------------------------------------------
# organizations/admin.py

from django.contrib import admin
from .models import Organization, Category

@admin.register(Organization)
class OrganizationAdmin(admin.ModelAdmin):
    list_display = ('name', 'address', 'email', 'phone_number', 'is_active')
    search_fields = ('name', 'address', 'email')

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ('name',)
    search_fields = ('name',)
--------------------------------------------------------------------------------

File: ./organizations\apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class OrganizationsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'organizations'
--------------------------------------------------------------------------------

File: ./organizations\models.py
--------------------------------------------------------------------------------
# organizations/models.py

from django.db import models

class Category(models.Model):
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name

class Organization(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(null=True, blank=True)
    website = models.URLField(null=True, blank=True)
    logo = models.ImageField(upload_to='logos/', null=True, blank=True)
    address = models.CharField(max_length=255)
    categories = models.ManyToManyField(Category)
    date_added = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)
    social_media_1 = models.CharField(max_length=250, null=True, blank=True)
    social_media_2 = models.CharField(max_length=250, null=True, blank=True)
    phone_number = models.CharField(max_length=100, null=True, blank=True)  # Increased max_length
    email = models.EmailField(null=True, blank=True)

    def __str__(self):
        return self.name
--------------------------------------------------------------------------------

File: ./organizations\serializers.py
--------------------------------------------------------------------------------
# organizations/serializers.py

from rest_framework import serializers
from .models import Organization, Category

class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = ['id', 'name']

class OrganizationSerializer(serializers.ModelSerializer):
    categories = CategorySerializer(many=True, read_only=True)
    logo = serializers.ImageField(use_url=True)  # Ensure full URL is used
    
    class Meta:
        model = Organization
        fields = [
            'id', 'name', 'description', 'website', 'logo',
            'address', 'categories', 'date_added', 'is_active',
            'social_media_1', 'social_media_2', 'phone_number', 'email'
        ]
--------------------------------------------------------------------------------

File: ./organizations\tests.py
--------------------------------------------------------------------------------
from django.test import TestCase

# Create your tests here.
--------------------------------------------------------------------------------

File: ./organizations\urls.py
--------------------------------------------------------------------------------
# organizations/urls.py

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import OrganizationViewSet, CategoryViewSet

router = DefaultRouter()
router.register(r'organizations', OrganizationViewSet, basename='organization')
router.register(r'categories', CategoryViewSet, basename='category')

urlpatterns = [
    path('', include(router.urls)),
]
--------------------------------------------------------------------------------

File: ./organizations\views.py
--------------------------------------------------------------------------------
# organizations/views.py

from rest_framework import viewsets
from .models import Organization, Category
from .serializers import OrganizationSerializer, CategorySerializer

class OrganizationViewSet(viewsets.ModelViewSet):
    queryset = Organization.objects.all()
    serializer_class = OrganizationSerializer

class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
--------------------------------------------------------------------------------

File: ./organizations\management\commands\createsu.py
--------------------------------------------------------------------------------
# users/management/commands/createsu.py

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model

class Command(BaseCommand):
    help = 'Create a superuser if it does not exist'

    def handle(self, *args, **kwargs):
        User = get_user_model()
        username = 'osc_user'
        email = 'oscadmin@gmail.com'
        password = 'oscuseroscsite'

        if not User.objects.filter(username=username).exists():
            self.stdout.write('Creating superuser...')
            User.objects.create_superuser(username=username, email=email, password=password)
            self.stdout.write('Superuser created.')
        else:
            self.stdout.write('Superuser already exists.')
--------------------------------------------------------------------------------

File: ./organizations\management\commands\export_data.py
--------------------------------------------------------------------------------
# organizations/management/commands/export_data.py

from django.core.management.base import BaseCommand
from django.core.management import call_command

class Command(BaseCommand):
    help = 'Export data to a JSON file'

    def add_arguments(self, parser):
        parser.add_argument(
            'output_file',
            type=str,
            help='Output file path'
        )

    def handle(self, *args, **options):
        output_file = options['output_file']
        with open(output_file, 'w', encoding='utf-8') as f:
            call_command('dumpdata', '--natural-foreign', '--natural-primary', '--indent', '2', stdout=f)
        self.stdout.write(self.style.SUCCESS(f'Data exported to {output_file}'))
--------------------------------------------------------------------------------

File: ./organizations\management\commands\import_data.py
--------------------------------------------------------------------------------
# organizations/management/commands/import_data.py

from django.core.management.base import BaseCommand
from django.core.management import call_command
import os

class Command(BaseCommand):
    help = 'Import data from JSON file'

    def add_arguments(self, parser):
        parser.add_argument(
            'json_file',
            type=str,
            help='Path to the JSON file to import'
        )

    def handle(self, *args, **options):
        json_file_path = options['json_file']

        if not os.path.exists(json_file_path):
            self.stderr.write(f"File {json_file_path} does not exist.")
            return

        self.stdout.write(f"Importing data from {json_file_path}...")

        call_command('loaddata', json_file_path)

        self.stdout.write("Data import completed successfully.")
--------------------------------------------------------------------------------

File: ./osc_project\asgi.py
--------------------------------------------------------------------------------
"""
ASGI config for osc_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'osc_project.settings')

application = get_asgi_application()
--------------------------------------------------------------------------------

File: ./osc_project\settings.py
--------------------------------------------------------------------------------
"""
Django settings for osc_project project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-yz0xxvyfurn62*f0v0xy5uhn5r8kz@@+*y9fo!2s^p)3&d2*-o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CORS_ALLOWED_ORIGINS = [
    'http://localhost:4200',
]

CORS_ALLOW_CREDENTIALS = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:4200',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'organizations',
    'projects',
    'forum',
    'recognitions',
    'resources',
    'diagnostics',
    'rest_framework',
    'corsheaders',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'osc_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'osc_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DATABASE_NAME', 'osc_db'),
        'USER': os.environ.get('DATABASE_USER', 'osc_user'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'osc_password'),
        'HOST': os.environ.get('DATABASE_HOST', 'localhost'),
        'PORT': os.environ.get('DATABASE_PORT', '5432'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# osc_project/settings.py

AUTH_USER_MODEL = 'users.User'
--------------------------------------------------------------------------------

File: ./osc_project\urls.py
--------------------------------------------------------------------------------
# osc_project/urls.py

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

# Set the 'View Site' link in the Django admin
admin.site.site_url = 'http://localhost:4200/home'

urlpatterns = [
    path('admin/', admin.site.urls),
    path('organizations/', include('organizations.urls')),
    path('projects/', include('projects.urls')),
    path('api/auth/login/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/auth/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    # path('forum/', include('forum.urls')),
    # path('recognitions/', include('recognitions.urls')),
    # path('resources/', include('resources.urls')),
    # path('diagnostics/', include('diagnostics.urls')),
    # path('users/', include('users.urls')),
]


# Serve media files during development
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)--------------------------------------------------------------------------------

File: ./osc_project\wsgi.py
--------------------------------------------------------------------------------
"""
WSGI config for osc_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'osc_project.settings')

application = get_wsgi_application()
--------------------------------------------------------------------------------

File: ./projects\admin.py
--------------------------------------------------------------------------------
# projects/admin.py

from django.contrib import admin
from .models import Project, Image

@admin.register(Image)
class ImageAdmin(admin.ModelAdmin):
    list_display = ('image',)

@admin.register(Project)
class ProjectAdmin(admin.ModelAdmin):
    list_display = ('name', 'organization', 'is_active', 'date_added')
    list_filter = ('is_active', 'date_added')
    search_fields = ('name', 'description', 'organization__name')
    filter_horizontal = ('categories', 'images')
--------------------------------------------------------------------------------

File: ./projects\apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class ProjectsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'projects'
--------------------------------------------------------------------------------

File: ./projects\models.py
--------------------------------------------------------------------------------
# projects/models.py

from django.db import models
from organizations.models import Organization, Category

class Image(models.Model):
    image = models.ImageField(upload_to='project_images/')

    def __str__(self):
        return self.image.name

# projects/models.py

class Project(models.Model):
    organization = models.ForeignKey(
        Organization,
        on_delete=models.CASCADE,
        related_name='projects'
    )
    name = models.CharField(max_length=255)
    description = models.TextField(null=True, blank=True)
    objectives = models.TextField(null=True, blank=True)
    achievements = models.TextField(null=True, blank=True)
    participation_methods = models.TextField(null=True, blank=True)
    images = models.ManyToManyField(Image, blank=True)
    categories = models.ManyToManyField(Category)
    date_added = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

--------------------------------------------------------------------------------

File: ./projects\serializers.py
--------------------------------------------------------------------------------
# projects/serializers.py

from rest_framework import serializers
from .models import Project, Image
from organizations.serializers import CategorySerializer, OrganizationSerializer

class ImageSerializer(serializers.ModelSerializer):
    class Meta:
        model = Image
        fields = ['id', 'image']

class ProjectSerializer(serializers.ModelSerializer):
    organization = OrganizationSerializer(read_only=True)
    categories = CategorySerializer(many=True, read_only=True)
    images = ImageSerializer(many=True, read_only=True)
    
    class Meta:
        model = Project
        fields = [
            'id', 'organization', 'name', 'description',
            'objectives', 'achievements', 'participation_methods',
            'images', 'categories', 'date_added', 'is_active'
        ]
--------------------------------------------------------------------------------

File: ./projects\tests.py
--------------------------------------------------------------------------------
from django.test import TestCase

# Create your tests here.
--------------------------------------------------------------------------------

File: ./projects\urls.py
--------------------------------------------------------------------------------
# projects/urls.py

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import ProjectViewSet, ImageViewSet

router = DefaultRouter()
router.register(r'projects', ProjectViewSet, basename='project')
router.register(r'images', ImageViewSet, basename='image')

urlpatterns = [
    path('', include(router.urls)),
]
--------------------------------------------------------------------------------

File: ./projects\views.py
--------------------------------------------------------------------------------
# projects/views.py

from rest_framework import viewsets
from .models import Project, Image
from .serializers import ProjectSerializer, ImageSerializer

class ProjectViewSet(viewsets.ModelViewSet):
    serializer_class = ProjectSerializer

    def get_queryset(self):
        queryset = Project.objects.all()
        organization = self.request.query_params.get('organization', None)
        if organization is not None:
            queryset = queryset.filter(organization__id=organization)
        return queryset


class ImageViewSet(viewsets.ModelViewSet):
    queryset = Image.objects.all()
    serializer_class = ImageSerializer
--------------------------------------------------------------------------------

File: ./recognitions\admin.py
--------------------------------------------------------------------------------
# recognitions/admin.py

from django.contrib import admin
from .models import Recognition

@admin.register(Recognition)
class RecognitionAdmin(admin.ModelAdmin):
    list_display = ('name', 'organization', 'date_awarded')
    search_fields = ('name', 'organization__name')
    list_filter = ('date_awarded', 'organization')
--------------------------------------------------------------------------------

File: ./recognitions\apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class RecognitionsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'recognitions'
--------------------------------------------------------------------------------

File: ./recognitions\models.py
--------------------------------------------------------------------------------
# recognitions/models.py

from django.db import models
from organizations.models import Organization

class Recognition(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    date_awarded = models.DateTimeField()
    organization = models.ForeignKey(
        Organization,
        on_delete=models.CASCADE,
        related_name='recognitions'
    )

    def __str__(self):
        return f"{self.name} - {self.organization.name}"
--------------------------------------------------------------------------------

File: ./recognitions\serializers.py
--------------------------------------------------------------------------------
# recognitions/serializers.py

from rest_framework import serializers
from .models import Recognition
from organizations.serializers import OrganizationSerializer

class RecognitionSerializer(serializers.ModelSerializer):
    organization = OrganizationSerializer(read_only=True)
    
    class Meta:
        model = Recognition
        fields = ['id', 'name', 'description', 'date_awarded', 'organization']
--------------------------------------------------------------------------------

File: ./recognitions\tests.py
--------------------------------------------------------------------------------
from django.test import TestCase

# Create your tests here.
--------------------------------------------------------------------------------

File: ./recognitions\urls.py
--------------------------------------------------------------------------------
# recognitions/urls.py

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import RecognitionViewSet

router = DefaultRouter()
router.register(r'recognitions', RecognitionViewSet, basename='recognition')

urlpatterns = [
    path('', include(router.urls)),
]
--------------------------------------------------------------------------------

File: ./recognitions\views.py
--------------------------------------------------------------------------------
# recognitions/views.py

from rest_framework import viewsets
from .models import Recognition
from .serializers import RecognitionSerializer

class RecognitionViewSet(viewsets.ModelViewSet):
    queryset = Recognition.objects.all()
    serializer_class = RecognitionSerializer
--------------------------------------------------------------------------------

File: ./resources\admin.py
--------------------------------------------------------------------------------
# resources/admin.py

from django.contrib import admin
from .models import Resource

@admin.register(Resource)
class ResourceAdmin(admin.ModelAdmin):
    list_display = ('title', 'added_by', 'date_added')
    list_filter = ('date_added',)
    search_fields = ('title', 'description', 'added_by__username')
--------------------------------------------------------------------------------

File: ./resources\apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class ResourcesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'resources'
--------------------------------------------------------------------------------

File: ./resources\models.py
--------------------------------------------------------------------------------
# resources/models.py

from django.db import models
from users.models import User

class Resource(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    file = models.FileField(upload_to='resources/files/', null=True, blank=True)
    url = models.URLField(null=True, blank=True)
    date_added = models.DateTimeField(auto_now_add=True)
    added_by = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='resources_added'
    )

    def __str__(self):
        return self.title
--------------------------------------------------------------------------------

File: ./resources\tests.py
--------------------------------------------------------------------------------
from django.test import TestCase

# Create your tests here.
--------------------------------------------------------------------------------

File: ./resources\views.py
--------------------------------------------------------------------------------
from django.shortcuts import render

# Create your views here.
--------------------------------------------------------------------------------

File: ./users\admin.py
--------------------------------------------------------------------------------
# users/admin.py

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from .models import User

class UserAdmin(BaseUserAdmin):
    fieldsets = BaseUserAdmin.fieldsets + (
        (None, {'fields': ('is_admin',)}),
    )
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_admin', 'is_staff')

admin.site.register(User, UserAdmin)
--------------------------------------------------------------------------------

File: ./users\apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'
--------------------------------------------------------------------------------

File: ./users\models.py
--------------------------------------------------------------------------------
# users/models.py

from django.contrib.auth.models import AbstractUser
from django.db import models

class User(AbstractUser):
    is_admin = models.BooleanField(default=False)

    def __str__(self):
        return self.username
--------------------------------------------------------------------------------

File: ./users\tests.py
--------------------------------------------------------------------------------
from django.test import TestCase

# Create your tests here.
--------------------------------------------------------------------------------

File: ./users\views.py
--------------------------------------------------------------------------------
# users/views.py

from django.contrib.auth import authenticate, login
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt  # Exempting CSRF for simplicity in development
@api_view(['POST'])
def login_view(request):
    username = request.data.get('username')
    password = request.data.get('password')
    user = authenticate(username=username, password=password)
    if user is not None:
        login(request, user)
        return Response({'message': 'Logged in successfully'}, status=status.HTTP_200_OK)
    else:
        return Response({'error': 'Invalid credentials'}, status=status.HTTP_400_BAD_REQUEST)
--------------------------------------------------------------------------------

